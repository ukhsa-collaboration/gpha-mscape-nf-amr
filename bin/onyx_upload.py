#!/usr/bin/env python3

"""Script to upload data generated by gpha-mscape-nf-amr pipeline. Three possible outputs:
- AMR analysis was not performed on sample.
- No AMR annotations were found for sample.
- AMR annotations were found for sample.
"""

import argparse
import logging
import sys
from importlib import resources
from pathlib import Path

from onyx import OnyxClient, OnyxConfig, OnyxEnv
from onyx_analysis_helper import onyx_analysis_helper_functions as oa

def get_args():
    """Get command line arguments"""
    parser = argparse.ArgumentParser(
        prog="QC sample",
        description="""Wrapper used to quality
        check mscape samples against a set of pre-defined criteria.
        Results are returned in a json format.
        """,
    )
    parser.add_argument("--input", "-i", type=str, required=True, help="Sample ID")
    parser.add_argument(
        "--tsv",
        "-t",
        type=str,
        required=False,
        help="Path to AMR results TSV output file, if available."
    )
    parser.add_argument(
        "--output", "-o", type=str, required=True, help="Folder to save logs to."
    )
    parser.add_argument(
        "--pipeline_status",
        "-s",
        type=str, choices=["Failed","Annotated","None"],
        required=True,
        help="Pipeline Status. Choices: 'Failed', 'Annotated', 'None'"
    )
    parser.add_argument(
        "--server",
        "-s",
        type=str,
        required=True,
        choices=["mscape", "synthscape"],
        help="Specify server code is being run on",
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--no-onyx",
        required=False,
        action="store_true",
        help="Use this option to only write results to file",
    )
    group.add_argument(
        "--store-onyx",
        required=False,
        action="store_true",
        help="Use this option to store results as an onyx analysis object for later upload",
    )
    group.add_argument(
        "--test-onyx",
        required=False,
        action="store_true",
        help="Use this option to do a test upload and check for errors before attempting an upload to onyx",
    )
    group.add_argument(
        "--prod-onyx",
        required=False,
        action="store_true",
        help="Use this option to upload results to onyx",
    )

    return parser.parse_args()

def set_up_logger(stdout_file):
    """Creates logger for component - all logging messages go to stdout
    log file, error messages also go to stderr log. If component runs
    correctly, stderr is empty.
    """
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter("[%(asctime)s] %(levelname)s: %(message)s")

    out_handler = logging.FileHandler(stdout_file, mode="a")
    out_handler.setFormatter(formatter)
    logger.addHandler(out_handler)

    return logger


def main():
    "Main function to process a given sample through QC."
    args = get_args()

    # Set up log file#
    log_file = Path(args.output) / f"{args.input}_qc_metrics_log.txt"
    set_up_logger(log_file)
    
    print(args)


if __name__ == "__main__":
    sys.exit(main())